name: Publish

description: Publish a package to NPM

inputs:
  working-directory:
    description: the path to the directory from repository root
    type: string
    required: true
  version:
    description: version type (patch, major, minor)
    type: string
  skip-build:
    descriptions: should package be build before publish
    type: boolean
    default: false
  skip-npm:
    description: should the package be published in npm
    type: boolean
    default: false

outputs:
  tag:
    description: name of the tag pushed after publishing
    value: ${{steps.publish.outputs.tag}}
  changelog:
    description: changelog entries for the latest package version
    value: ${{steps.publish.outputs.changelog}}

runs:
  using: composite
  steps:
    - name: Publish
      id: publish
      shell: bash
      working-directory: ${{inputs.working-directory}}
      run: |
        echo "::group::Prepare package"
        PACKAGE_NAME="$(cat ./package.json | jq -r .name)"
        echo "::endgroup::"

        echo "::group::Configure Git"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        echo "::endgroup::"

        BRANCH="$(git rev-parse --abbrev-ref HEAD)"
        if [ "$BRANCH" = "${{github.ref_name}}" ]
        then
          echo "::group::Creating temporary branch"
          BRANCH="${PACKAGE_NAME}_$(date +%F_%H-%M)"
          git checkout -b $BRANCH
          git push -u origin $BRANCH
          echo "::notice::Publish branch - $BRANCH"
          echo "::set-output name=branch::$BRANCH"
          echo "::endgroup::"
        fi

        if [ "${{inputs.skip-build}}" = "false" ]
        then
          echo "::group::Installing and updating dependencies"
          yarn install
          npm run deps --if-present -- --commit
          echo "::endgroup::"

          echo "::group::Building package"
          npm run build --if-present
          echo "::endgroup::"
        fi

        echo "::group::Publish $PACKAGE_NAME"
        if [ "${{inputs.skip-npm}}" = "true" ]
        then yarn version "--${{inputs.version}}"
        elif [ ! -z "${{inputs.version}}" ]
        then yarn publish "--${{inputs.version}}"
        else yarn publish
        fi
        TAG="$(git describe --tags --abbrev=0 || true)"
        if [ ! -z "$TAG" ]
        then 
          echo "::notice::Publish tag - $TAG"
          echo "::set-output name=tag::$TAG"
        fi

        CHANGELOG="$(npx -y -p @applitools/bongo bongo log --latest-changelog)"
        CHANGELOG="${CHANGELOG//'%'/'%25'}"
        CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
        CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
        echo "::set-output name=changelog::$CHANGELOG"
        echo "::endgroup::"

        echo "::group::Merge publish branch into ${{github.ref_name}}"
        git checkout ${{github.ref_name}}
        git fetch
        git status
        git pull origin ${{github.ref_name}} --rebase
        git merge $BRANCH
        git push origin ${{github.ref_name}}
        echo "::endgroup::"
