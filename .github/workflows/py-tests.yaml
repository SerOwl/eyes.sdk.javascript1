name: Build and test python packages
on:
  schedule: [cron: 42 3 * * *]
  pull_request:
    paths:
      - 'python/**'
  workflow_dispatch:
    inputs:
      unit_tests:
        description: Unit tests
        type: boolean
        required: false
        default: true
      installation_tests:
        description: Installation tests
        type: boolean
        required: false
        default: false
      generated_tests:
        description: Generated tests
        type: boolean
        required: false
        default: false
      functional_tests:
        description: Functional tests
        type: boolean
        required: false
        default: false
      robotframework_tests:
        description: Robot framework tests
        type: boolean
        required: false
        default: false
  workflow_call:
    inputs:
      ref:
        description: branch to test
        required: false
        type: string
      releasing_package:
        description: name of the package being released
        required: false
        type: string
      # Same parameters as workflow_dispatch, run all tests by default
      unit_tests:
        description: Unit tests
        type: boolean
        required: false
        default: true
      installation_tests:
        description: Installation tests
        type: boolean
        required: false
        default: true
      generated_tests:
        description: Generated tests
        type: boolean
        required: false
        default: true
      functional_tests:
        description: Functional tests
        type: boolean
        required: false
        default: true
      robotframework_tests:
        description: Robot framework tests
        type: boolean
        required: false
        default: true

jobs:
  dist-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - uses: actions/setup-python@v3
        with:
          python-version: "3.6"
      - name: Build packages
        working-directory: python
        run: make dist
      - uses: actions/upload-artifact@v3
        with:
          name: packages
          if-no-files-found: error
          # the * wildcard in pyth*n is not to match anything, but to prevent
          # upload-artifact from flattening python directory, e.g. uploading
          # it's contents without python directory itself.
          path: "pyth*n/*/dist/"

  unit-tests:
    needs: dist-build
    if: ${{ !(github.event_name == 'workflow_dispatch') || inputs.unit_tests }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ '2.7', '3.6', '3.11' ]
        exclude:
          - os: macos-latest
            python-version: '3.6'
          - os: windows-latest
            python-version: '3.6'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v3
        with:
          name: packages
      - run: make eyes_selenium_unit_tests
        working-directory: python
        env:
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
          APPLITOOLS_LOG_DIR: logs
      - run: |
          ls python/logs
          echo python/logs/*.log
          echo `echo python/logs/*.log`
          tail -n +1 python/logs/*.log
        if: always()


  unit-tests-alpine:
    needs: dist-build
    if: ${{ !(github.event_name == 'workflow_dispatch') || inputs.unit_tests }}
    runs-on: ubuntu-latest
    container: "alpine:latest"
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - uses: actions/download-artifact@v3
        with:
          name: packages
      - run: apk add gcc libffi-dev make musl-dev py3-pip python3-dev && ln -s /usr/bin/python3 /usr/bin/python
      - run: make eyes_selenium_unit_tests
        working-directory: python
        env:
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}

  installation-tests:
    needs: dist-build
    if: ${{ !(github.event_name == 'workflow_dispatch') || inputs.installation_tests }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ '2.7', '3.11' ]
        exclude:
          - os: macos-latest
            python-version: '2.7'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v3
        with:
          name: packages
      - run: make eyes_selenium_installation_tests
        working-directory: python

  generated-tests:
    needs: dist-build
    if: ${{ !(github.event_name == 'workflow_dispatch') || inputs.generated_tests }}
    concurrency: sauce_group_1
    strategy:
      max-parallel: 1
      matrix:
        python-version: [ '3.6', '3.11' ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: browser-actions/setup-firefox@latest
        with:
          firefox-version: latest
      - uses: actions/download-artifact@v3
        with:
          name: packages
      - run: make eyes_selenium_generated_tests
        working-directory: python
        env:
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
          APPLITOOLS_API_KEY_READ: ${{ secrets.APPLITOOLS_API_KEY_READ }}
          SAUCE_USERNAME: ${{ secrets.SAUCE_USERNAME }}
          SAUCE_ACCESS_KEY: ${{ secrets.SAUCE_ACCESS_KEY }}
          GH_TOKEN: ${{secrets.GITHUB_TOKEN }}
          RELEASING_PACKAGE: ${{ inputs.releasing_package }}
          TEST_REPORT_SANDBOX: ${{ inputs.releasing_package && 'False' || 'True'}}

  functional-tests:
    needs: dist-build
    if: ${{ !(github.event_name == 'workflow_dispatch') || inputs.functional_tests }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        python-version: [ '2.7', '3.6', '3.11' ]
        exclude:
          - os: windows-latest
            python-version: '3.6'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v3
        with:
          name: packages
      - run: make eyes_images_functional_tests
        working-directory: python
        env:
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
          TEST_REPORT_SANDBOX: ${{ inputs.releasing_package && 'False' || 'True'}}
      - run: make eyes_selenium_functional_tests
        working-directory: python
        env:
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
          TEST_REPORT_SANDBOX: ${{ inputs.releasing_package && 'False' || 'True'}}

  sauce-functional-tests:
    needs: dist-build
    if: ${{ !(github.event_name == 'workflow_dispatch') || inputs.functional_tests }}
    concurrency: sauce_group_2
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - uses: actions/download-artifact@v3
        with:
          name: packages
      - run: make eyes_selenium_sauce_functional_tests
        working-directory: python
        env:
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
          SAUCE_USERNAME: ${{ secrets.SAUCE_USERNAME }}
          SAUCE_ACCESS_KEY: ${{ secrets.SAUCE_ACCESS_KEY }}
          TEST_REPORT_SANDBOX: ${{ inputs.releasing_package && 'False' || 'True'}}

  robot-framework-tests:
    needs: dist-build
    if: ${{ !(github.event_name == 'workflow_dispatch') || inputs.robotframework_tests }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - uses: actions/setup-python@v3
        with:
          python-version: '3.6'
      - uses: actions/download-artifact@v3
        with:
          name: packages
      - run: make eyes_robotframework_functional_tests
        working-directory: python
        env:
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
          SAUCE_USERNAME: ${{ secrets.SAUCE_USERNAME }}
          SAUCE_ACCESS_KEY: ${{ secrets.SAUCE_ACCESS_KEY }}
          TEST_REPORT_SANDBOX: ${{ inputs.releasing_package && 'False' || 'True'}}

  sauce-robot-framework-tests:
    needs: dist-build
    if: ${{ !(github.event_name == 'workflow_dispatch') || inputs.robotframework_tests }}
    concurrency: sauce_group_2
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - uses: actions/setup-python@v3
        with:
          python-version: '3.6'
      - uses: actions/download-artifact@v3
        with:
          name: packages
      - run: make eyes_robotframework_sauce_functional_tests
        working-directory: python
        env:
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
          SAUCE_USERNAME: ${{ secrets.SAUCE_USERNAME }}
          SAUCE_ACCESS_KEY: ${{ secrets.SAUCE_ACCESS_KEY }}
          TEST_REPORT_SANDBOX: ${{ inputs.releasing_package && 'False' || 'True'}}

  report:
    needs:
      - unit-tests
      - unit-tests-alpine
      - installation-tests
      - generated-tests
      - functional-tests
      - sauce-functional-tests
      - robot-framework-tests
      - sauce-robot-framework-tests
    if: ${{ always() && github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    steps:
      - uses: slackapi/slack-github-action@v1.21.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.PYTHON_SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {
              "text": "Python tests <https://github.com/applitools/eyes.sdk.javascript1/actions/runs/${{github.run_id}}|execution> report:\nUnit tests: ${{needs.unit-tests.result}}\nUnit tests (alpine): ${{needs.unit-tests-alpine.result}}\nInstallation tests: ${{needs.installation-tests.result}}\nGenerated tests: ${{needs.generated-tests.result}}\nFunctional tests: ${{needs.functional-tests.result}}\nFunctional tests (sauce): ${{needs.sauce-functional-tests.result}}\nRobot framework tests: ${{needs.robot-framework-tests.result}}\nRobot framework tests (sauce): ${{needs.sauce-robot-framework-tests.result}}"
            }
